generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
}

enum Role {
    SUPERADMIN
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Customer {
    id          String        @id @default(cuid())
    name        String
    email       String
    phoneNumber String
    address     String
    age         Int
    gender      Gender
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Transaction Transaction[]
}

enum Gender {
    MALE
    FEMALE
}

model Departure {
    id            String          @id @default(cuid())
    name          String
    departureDate DateTime
    returnDate    DateTime
    status        DepartureStatus @default(PREPARING)
    Transaction   Transaction[]
}

enum DepartureStatus {
    PREPARING
    ONGOING
    FINISH
}

model ProductCategory {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model Product {
    id                 String               @id @default(cuid())
    name               String
    description        String
    price              Int
    stock              Int
    restockLevel       Int
    components         Component[]
    productsComponents ProductsComponents[]
    productCategory    ProductCategory      @relation(fields: [productCategoryId], references: [id])
    productCategoryId  String
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    Transaction        Transaction[]
}

model Component {
    id                 String               @id @default(cuid())
    name               String
    description        String
    price              Int
    stock              Int
    restockLevel       Int
    products           Product[]
    productsComponents ProductsComponents[]
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
}

model ProductsComponents {
    product     Product   @relation(fields: [productId], references: [id])
    productId   String
    component   Component @relation(fields: [componentId], references: [id])
    componentId String
    quantity    Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@id(name: "id", fields: [productId, componentId])
}

enum TransactionStatus {
    NEW
    IN_PROCESS
    SETTLE
    CANCEL
}

model Transaction {
    id          String            @id @default(cuid())
    status      TransactionStatus @default(NEW)
    customer    Customer          @relation(fields: [customerId], references: [id])
    customerId  String
    departure   Departure         @relation(fields: [departureId], references: [id])
    departureId String
    product     Product           @relation(fields: [productId], references: [id])
    productId   String
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    @@unique([customerId, departureId])
}
